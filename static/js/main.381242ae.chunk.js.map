{"version":3,"sources":["components/debounce.tsx","components/filterusers.tsx","components/link.tsx","components/listusers.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Debounce","onchange","onChange","e","target","value","type","className","placeholder","Filter","filtered","map","User","key","name","username","Link","searching","useState","users","setUsers","useEffect","filter","user","toLowerCase","includes","axios","get","then","res","data","catch","err","Listusers","userName","setSearchUser","filteredUsers","setFilteredUsers","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","console","message"],"mappings":"wRAmBeA,G,MAbmB,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SACjC,OACI,6BACI,2BACIC,SAAU,SAACC,GAAD,OAAOF,EAASE,EAAEC,OAAOC,QACnCC,KAAK,QACLC,UAAU,aACVC,YAAY,8BCcXC,G,MAjBiB,SAAC,GAAgB,IAAfC,EAAc,EAAdA,SAChC,OACE,yBAAKH,UAAU,SACb,wBAAIA,UAAU,aACXG,EAASC,KAAI,SAACC,GAAD,OACZ,wBAAIC,IAAKD,EAAKE,MACZ,yBAAKP,UAAU,QACZK,EAAKE,KADR,IACc,6BADd,KACuBF,EAAKG,SAD5B,a,iBCmBCC,EAxBiB,SAAC,GAA0B,IAAzBC,EAAwB,EAAxBA,UAAUP,EAAc,EAAdA,SAAc,EAC9BQ,mBAAS,IADqB,mBACjDC,EADiD,KAC1CC,EAD0C,KAiBtD,OAfAC,qBAAU,WACRX,EACES,EAAMG,QAAO,SAACC,GAAD,OACXA,EAAKT,KAAKU,cAAcC,SAASR,EAAUO,qBAG9C,CAACP,EAAWE,IACfE,qBAAU,WACRK,IACGC,IAAI,8CACJC,MAAK,SAACC,GACLT,EAASS,EAAIC,SACZC,OAAM,SAACC,UAIV,+BCNOC,EAba,WAAO,IAAD,EACIf,mBAAS,IADb,mBACvBgB,EADuB,KACbC,EADa,OAEYjB,mBAAmB,IAF/B,mBAEvBkB,EAFuB,KAERC,EAFQ,KAI9B,OACI,6BACI,kBAAC,EAAD,CAAUpC,SAAUkC,IACpB,kBAAC,EAAD,CAAMlB,UAAWiB,EAAUxB,SAAU2B,IACrC,kBAAC,EAAD,CAAQ3B,SAAU0B,MCNfE,MANf,WACE,OACE,kBAAC,EAAD,OCIgBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDiIpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBvB,MAAK,SAAAwB,GACJA,EAAaC,gBAEdtB,OAAM,SAAAuB,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.381242ae.chunk.js","sourcesContent":["import React from 'react'\r\nimport './debounce.css'\r\n\r\ntype Props = {\r\n    onchange: Function;\r\n}\r\nconst Debounce: React.FC<Props> = ({ onchange }) => {\r\n    return (\r\n        <div>\r\n            <input\r\n                onChange={(e) => onchange(e.target.value)}\r\n                type=\"Input\"\r\n                className=\"inputfield\"\r\n                placeholder=\"Search by user name...\"\r\n            />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Debounce","import React from 'react'\r\nimport './filteredusers.css'\r\n\r\ntype Props = {\r\n    filtered: Array<User>;\r\n  }\r\n  type User = {\r\n    name: string;\r\n    username: string;\r\n  }\r\n  const Filter: React.FC<Props> = ({filtered}) => {\r\n    return (\r\n      <div className=\"users\">\r\n        <ol className=\"userslist\">\r\n          {filtered.map((User) => (\r\n            <li key={User.name}>\r\n              <div className=\"text\">\r\n                {User.name} <br />(@{User.username})\r\n              </div>\r\n            </li>\r\n          ))}\r\n        </ol>\r\n      </div>\r\n    );\r\n  \r\n  }\r\n\r\n  export default Filter","import React, {useEffect, useState} from 'react'\r\nimport axios from 'axios'\r\n\r\ntype Props = {\r\n    searching: string;\r\n    filtered: Function;\r\n  }\r\n  type User = {\r\n    name: string;\r\n    username: string;\r\n  }\r\n  const Link: React.FC<Props> = ({searching,filtered}) => {\r\n    let [users, setUsers] = useState([]);\r\n    useEffect(() => {\r\n      filtered(\r\n        users.filter((user: User) =>\r\n          user.name.toLowerCase().includes(searching.toLowerCase())\r\n        )\r\n      );\r\n    }, [searching, users]);\r\n    useEffect(() => {\r\n      axios\r\n        .get(\"https://jsonplaceholder.typicode.com/users\")\r\n        .then((res) => {\r\n          setUsers(res.data);\r\n        }).catch((err) => {\r\n        })\r\n    });\r\n    return(\r\n        <div>\r\n            \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Link;","import React, { useState } from 'react'\r\nimport Debounce from './debounce'\r\nimport Filter from './filterusers'\r\nimport Link from './link'\r\n\r\ntype Person = {\r\n    name:string;\r\n    username:string;\r\n}\r\n\r\nconst Listusers: React.FC = () => {\r\n    const [userName, setSearchUser] = useState(\"\");\r\n    const [filteredUsers, setFilteredUsers] = useState<Person[]>([]);\r\n\r\n    return (\r\n        <div>\r\n            <Debounce onchange={setSearchUser}/>\r\n            <Link searching={userName} filtered={setFilteredUsers}/>\r\n            <Filter filtered={filteredUsers}/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Listusers","import React from 'react'\r\nimport './App.css'\r\nimport Listusers from './components/listusers';\r\n\r\n\r\n\r\nfunction App() {\r\n  return (\r\n    <Listusers />\r\n  );\r\n}\r\n\r\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}